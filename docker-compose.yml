services:
  db:
    image: postgres:13.0-alpine
    volumes:
      - pg_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: foodgram_user
      POSTGRES_PASSWORD: foodgram_password
      POSTGRES_DB: foodgram
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U foodgram_user -d foodgram"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend/
    volumes:
      - ./backend/:/app/
      - ./data/:/app/data/
      - static_volume:/app/collected_static/
      - media_volume:/app/media/
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER: foodgram_user
      POSTGRES_PASSWORD: foodgram_password
      POSTGRES_DB: foodgram
      DB_HOST: db
      DB_PORT: 5432
      SECRET_KEY: 'local-secret-key-for-dev'
      DEBUG: "True"
      ALLOWED_HOSTS: "localhost,127.0.0.1"
    command: python manage.py runserver 0.0.0.0:8000

  frontend:
    build: ./frontend/
    # Складываем результат сборки в общий том frontend_build_volume
    volumes:
      - frontend_build_volume:/app/build

  gateway:
    build:
      context: .
      dockerfile: ./infra/Dockerfile
    ports:
      - "80:80"
    volumes:
      - static_volume:/app/collected_static/
      - media_volume:/app/media/
      - frontend_build_volume:/app/frontend_static/
    depends_on:
      - backend
      - frontend

volumes:
  pg_data:
  static_volume:
  media_volume:
  # Объявляем новый том
  frontend_build_volume:
  