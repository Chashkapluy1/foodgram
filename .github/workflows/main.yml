name: Foodgram CI/CD

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_DB: foodgram_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./backend/requirements.txt
    - name: Run Django tests
      env:
        POSTGRES_DB: foodgram_test_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
        SECRET_KEY: a-test-secret-key-for-ci
        DEBUG: "False"
      run: |
        cd backend/
        python manage.py test

  build_and_push_to_docker_hub:
    name: Build and Push Docker images
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Check out the repo
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push backend to DockerHub
      uses: docker/build-push-action@v4
      with:
        context: ./backend/
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
    - name: Push frontend to DockerHub
      uses: docker/build-push-action@v4
      with:
        context: ./frontend/
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
    - name: Push gateway to DockerHub
      uses: docker/build-push-action@v4
      with:
        context: ./infra/
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          # Полностью удаляем старую папку, чтобы избежать проблем с git pull
          sudo rm -rf foodgram
          # Клонируем заново по SSH
          git clone git@github.com:Chashkapluy1/foodgram.git
          cd foodgram
          
          echo "${{ secrets.DOT_ENV }}" > .env
          
          sudo docker compose -p foodgram_project -f docker-compose.production.yml pull
          sudo docker compose -p foodgram_project -f docker-compose.production.yml down -v --remove-orphans
          sudo docker compose -p foodgram_project -f docker-compose.production.yml up -d
          
          # Ждем, чтобы backend успел запуститься
          sleep 15
          
          # Выполняем миграции и collectstatic
          sudo docker compose -p foodgram_project -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -p foodgram_project -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
          
          sudo docker image prune -f

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ✅ Деплой проекта Foodgram успешно выполнен!
          Инициатор: ${{ github.actor }}
          Коммит: "${{ github.event.commits[0].message }}"
          Посмотреть коммит: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
