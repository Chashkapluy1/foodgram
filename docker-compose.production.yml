services:
  db:
    image: postgres:13.0-alpine
    restart: always
    volumes:
      - pg_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - foodgram_network

  backend:
    build: ./backend/
    restart: always
    volumes:
      - ./data/:/app/data/
      - django_static_volume:/app/collected_static/
      - media_volume:/app/media/
    depends_on:
      db:
        condition: service_healthy
    env_file: ./.env
    networks:
      - foodgram_network
    command: >
      sh -c "python manage.py migrate &&
          python manage.py runserver 0.0.0.0:8000"

  frontend:
    build: ./frontend/
    volumes:
      - frontend_static_volume:/app/build/
    networks:
      - foodgram_network

  gateway:
    build: ./infra/
    restart: always
    ports:
      - "8001:80"
    volumes:
      - django_static_volume:/app/collected_static/
      - frontend_static_volume:/app/frontend_static/
      - media_volume:/app/media/
    depends_on:
      - backend
    networks:
      - foodgram_network

volumes:
  pg_data:
  django_static_volume:
  frontend_static_volume:
  media_volume:

networks:
  foodgram_network:
    driver: bridge
