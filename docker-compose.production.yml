version: '3.8'

services:
  db:
    image: postgres:13.0-alpine
    restart: always
    volumes:
      - pg_data:/var/lib/postgresql/data/
    env_file: ./.env
    networks:
      - foodgram_network

  backend:
    build: ./backend/
    restart: always
    volumes:
      - static_volume:/app/static_collected/
      - media_volume:/app/media/
    depends_on:
      - db
    env_file: ./.env
    networks:
      - foodgram_network
    # Используем наш скрипт ожидания
    entrypoint: ["wait-for-postgres.sh", "db", "gunicorn", "foodgram.wsgi:application", "--bind", "0:8000"]

  frontend:
    build: ./frontend/
    # Эта команда просто скопирует билд в том и остановится
    command: sh -c "cp -r /app/build/. /static/"
    volumes:
      - static_volume:/static/
    networks:
      - foodgram_network

  gateway:
    build:
      context: . # Контекст сборки - корень проекта
      dockerfile: ./infra/Dockerfile.gateway
    restart: always
    ports:
      - "8001:80"
    volumes:
      - static_volume:/staticfiles/
      - media_volume:/media/
    depends_on:
      # Nginx должен ждать и бэкенд, и фронтенд
      - backend
      - frontend
    networks:
      - foodgram_network

volumes:
  pg_data:
  static_volume:
  media_volume:

networks:
  foodgram_network:
    driver: bridge
